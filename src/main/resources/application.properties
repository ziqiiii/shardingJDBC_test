spring.jpa.database=mysql
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none

#//add by ziqi
ziqi.sharding.tables.logic-table-name=goods
ziqi.sharding.tables.sharding-column=goods_id
ziqi.sharding.tables.actual-table-name.list=goods_0,goods_1
#ziqi.sharding.tables.actual-table-name.list[0]=goods_0
#ziqi.sharding.tables.actual-table-name.list[1]=goods_1


#数据库database0地址
#database0.url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false
database0.url=
##数据库database0用户名
database0.username=
##数据库database0密码
database0.password=
##数据库database0驱动
database0.driverClassName=com.mysql.jdbc.Driver
##数据库database0名称
database0.databaseName=database0

###############################################################################3
##数据源名称，多数据源以逗号分隔
#spring.shardingsphere.datasource.names=database0
#
##spring.shardingsphere.datasource.<data-source-name>.type= #数据库连接池类名称
##spring.shardingsphere.datasource.<data-source-name>.driver-class-name= #数据库驱动类名
##spring.shardingsphere.datasource.<data-source-name>.url= #数据库url连接
##spring.shardingsphere.datasource.<data-source-name>.username= #数据库用户名
##spring.shardingsphere.datasource.<data-source-name>.password= #数据库密码
##spring.shardingsphere.datasource.<data-source-name>.xxx= #数据库连接池的其它属性
##
#spring.shardingsphere.datasource.database0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.database0.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.database0.url=
#spring.shardingsphere.datasource.database0.username=root
#spring.shardingsphere.datasource.database0.password=

##spring.shardingsphere.datasource.ds1.type=org.apache.commons.dbcp.BasicDataSource
##spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
##spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1
##spring.shardingsphere.datasource.ds1.username=root
##spring.shardingsphere.datasource.ds1.password=
#
#
#
##spring.shardingsphere.sharding.tables.<logic-table-name>.actual-data-nodes= #由数据源名 + 表名组成，以小数点分隔。
## 多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。
## 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.sharding.tables.goods.actual-data-nodes=database0.goods_$->{0..1}
#
#
##分表策略，同分库策略
##spring.shardingsphere.sharding.tables.<logic-table-name>.table-strategy.xxx= #省略
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.sharding-column=goods_id
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods_$->{goods_id % 2}
#
#
##spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.column= #自增列名称，缺省表示不使用自增主键生成器
##spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.type= #自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
##spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.props.<property-name>= #属性配置, 注意：使用SNOWFLAKE算法，需要配置worker.id与max.tolerate.time.difference.milliseconds属性
#spring.shardingsphere.sharding.tables.goods.key-generator.column=goods_id
#spring.shardingsphere.sharding.tables.goods.key-generator.type=SNOWFLAKE
#
#
##spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..1}
##spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
##spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}
##spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id
##spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
#
#
##spring.shardingsphere.sharding.binding-tables[0]= #绑定表规则列表
##spring.shardingsphere.sharding.binding-tables[1]= #绑定表规则列表
##spring.shardingsphere.sharding.binding-tables[x]= #绑定表规则列表
#
##spring.shardingsphere.sharding.broadcast-tables[0]= #广播表规则列表
##spring.shardingsphere.sharding.broadcast-tables[1]= #广播表规则列表
##spring.shardingsphere.sharding.broadcast-tables[x]= #广播表规则列表
##spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
##spring.shardingsphere.sharding.broadcast-tables=t_config
#
#
##行表达式分片策略
##spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= #分片列名称
##spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= #分片算法行表达式，需符合groovy语法
##spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
##spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}